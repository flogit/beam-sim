"use strict";

// Use this inspiration ? http://evanw.github.io/lightgl.js/docs/vector.html

/**
 * @constructor
 */
function Vector2D(x, y)
{
    DEBUGCheckArgumentsAreValids(arguments, 2);

    this.x = x;
    this.y = y;
}

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.equal = function(that)
{
    DEBUGCheckArgumentsAreValids(arguments, 1);

    return floatEqual(this.x, that.x) && floatEqual(this.y, that.y);
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.assign = function(that)
{
    DEBUGCheckArgumentsAreValids(arguments, 1);

    this.x = that.x;
    this.y = that.y;

    return this;
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.clone = function()
{
    return new Vector2D(this.x, this.y);
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.add = function(that)
{
    DEBUGCheckArgumentsAreValids(arguments, 1);

    return new Vector2D(this.x + that.x, this.y + that.y);
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.addInline = function(that)
{
    DEBUGCheckArgumentsAreValids(arguments, 1);

    return this.assign(this.add(that));
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.sub = function(that)
{
    DEBUGCheckArgumentsAreValids(arguments, 1);

    return new Vector2D(this.x - that.x, this.y - that.y);
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.subInline = function(that)
{
    DEBUGCheckArgumentsAreValids(arguments, 1);

    return this.assign(this.sub(that));
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.multiply = function(scalar)
{
    DEBUGCheckArgumentsAreValids(arguments, 1);

    return new Vector2D(this.x * scalar, this.y * scalar);
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.multiplyInline = function(scalar)
{
    DEBUGCheckArgumentsAreValids(arguments, 1);

    return this.assign(this.multiply(scalar));
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.divide = function(scalar)
{
    DEBUGCheckArgumentsAreValids(arguments, 1);

    return new Vector2D(this.x / scalar, this.y / scalar);
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.divideInline = function(scalar)
{
    DEBUGCheckArgumentsAreValids(arguments, 1);

    return this.assign(this.divide(scalar));
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.norm = function()
{
    return Math.sqrt(this.normSq());
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.normSq = function()
{
    return (this.x*this.x + this.y*this.y);
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.normalize = function()
{
    return this.divide(this.norm());
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.normalizeInline = function()
{
    this.divideInline(this.norm());

    return this;
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.dot = function(that)
{
    DEBUGCheckArgumentsAreValids(arguments, 1);

    return (this.x * that.x) + (this.y * that.y);
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.cross = function(that)
{
    DEBUGCheckArgumentsAreValids(arguments, 1);

    return (this.x * that.y) - (this.y * that.x);
}

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.rotate = function(inAngle, inCenter)
{
    DEBUGCheckFirstArgumentsAreValids(arguments, 1);

    var centered_vector;

    if (typeof inCenter != 'undefined')
    {
        centered_vector = this.sub(inCenter);
    }
    else
    {
        centered_vector = this.clone();
    }

    var s = Math.sin(inAngle);
    var c = Math.cos(inAngle);

    var rotated_centered_vector = new Vector2D(centered_vector.x * c - centered_vector.y * s,
                                               centered_vector.x * s + centered_vector.y * c);

    if (typeof inCenter != 'undefined')
    {
        rotated_centered_vector.addInline(inCenter);
    }

    return rotated_centered_vector;
}

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.rotateInline = function(inAngle, inCenter)
{
    DEBUGCheckFirstArgumentsAreValids(arguments, 1);

    return this.assign(this.rotate(inAngle, inCenter));
}

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
Vector2D.prototype.toString = function(accurate)
{
    if (typeof accurate != 'undefined')
    {
        return "(" + this.x + ", " + this.y + ")";
    }
    else
    {
        return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ")";
    }
};
